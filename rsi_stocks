from alpaca.data.historical import StockHistoricalDataClient
from alpaca.data.requests import StockBarsRequest
from alpaca.data.timeframe import TimeFrame
from datetime import datetime
from config import API_KEY, SECRET_KEY

client = StockHistoricalDataClient(API_KEY, SECRET_KEY)

request_params = StockBarsRequest(
    symbol_or_symbols=["GLD"],
    timeframe=TimeFrame.Day,
    start=datetime(2020, 1, 1),
    end=datetime(2024, 1, 1)
)

bars = client.get_stock_bars(request_params)
gld_data = bars.df.loc["GLD"]

periods = 14
delta = gld_data['open'].diff()
gain = delta.where(delta > 0, 0)
loss = -delta.where(delta < 0, 0)

avg_gain = gain.rolling(window=periods, min_periods=1).mean()
avg_loss = loss.rolling(window=periods, min_periods=1).mean()

rs = avg_gain / avg_loss
rsi = 100 - (100 / (1 + rs))

num_shares_to_buy = 20
portfolio = {"cash": 10000, "shares": 0}
trade_log = []
equity_curve = []

winning_trades = 0
losing_trades = 0

for date, row in gld_data.iterrows():
    current_price = row["close"]
    current_rsi = rsi.loc[date]

    equity_value = portfolio["cash"] + (portfolio["shares"] * current_price)
    equity_curve.append(equity_value)

    if 2 <= current_rsi <= 20 and portfolio["cash"] >= current_price * num_shares_to_buy:
        portfolio["shares"] += num_shares_to_buy
        portfolio["cash"] -= current_price * num_shares_to_buy
        trade_log.append((date, "BUY", current_price, num_shares_to_buy))

    elif not (2 <= current_rsi <= 20) and portfolio["shares"] > 0:
        sell_price = current_price
        total_cost = sum(trade[2] * trade[3] for trade in trade_log if trade[1] == "BUY")
        total_shares = sum(trade[3] for trade in trade_log if trade[1] == "BUY")
        cost_basis = total_cost / total_shares if total_shares > 0 else 0

        if sell_price > cost_basis:
            winning_trades += 1
        else:
            losing_trades += 1

        portfolio["cash"] += portfolio["shares"] * sell_price
        trade_log.append((date, "SELL", sell_price, portfolio["shares"]))
        portfolio["shares"] = 0

final_value = portfolio["cash"] + (portfolio["shares"] * gld_data.iloc[-1]["close"])

total_trades = winning_trades + losing_trades
winning_percentage = (winning_trades / total_trades) * 100 if total_trades > 0 else 0

max_equity = 0
max_drawdown = 0

for value in equity_curve:
    max_equity = max(max_equity, value)
    drawdown = max_equity - value
    max_drawdown = max(max_drawdown, drawdown)

print("Trade Log:")
for trade in trade_log:
    print(trade)

print("\nFinal Portfolio Value: ${:.2f}".format(final_value))
print("Remaining Cash: ${:.2f}".format(portfolio["cash"]))
print("Remaining Shares: {}".format(portfolio["shares"]))
print("\nWinning Percentage: {:.2f}%".format(winning_percentage))
print("Maximum Drawdown: ${:.2f}".format(max_drawdown))